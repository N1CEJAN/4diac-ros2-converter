// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Ros2PrimitiverDatentyp.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Ros2PrimitiverDatentyp.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define conversion_tests_msg_Ros2PrimitiverDatentyp_max_cdr_typesize 1ULL;
#define conversion_tests_msg_Ros2PrimitiverDatentyp_max_key_cdr_typesize 0ULL;

conversion_tests::msg::Ros2PrimitiverDatentyp::Ros2PrimitiverDatentyp()
{
    // boolean m_a_bool
    m_a_bool = false;

}

conversion_tests::msg::Ros2PrimitiverDatentyp::~Ros2PrimitiverDatentyp()
{
}

conversion_tests::msg::Ros2PrimitiverDatentyp::Ros2PrimitiverDatentyp(
        const Ros2PrimitiverDatentyp& x)
{
    m_a_bool = x.m_a_bool;
}

conversion_tests::msg::Ros2PrimitiverDatentyp::Ros2PrimitiverDatentyp(
        Ros2PrimitiverDatentyp&& x) noexcept 
{
    m_a_bool = x.m_a_bool;
}

conversion_tests::msg::Ros2PrimitiverDatentyp& conversion_tests::msg::Ros2PrimitiverDatentyp::operator =(
        const Ros2PrimitiverDatentyp& x)
{

    m_a_bool = x.m_a_bool;

    return *this;
}

conversion_tests::msg::Ros2PrimitiverDatentyp& conversion_tests::msg::Ros2PrimitiverDatentyp::operator =(
        Ros2PrimitiverDatentyp&& x) noexcept
{

    m_a_bool = x.m_a_bool;

    return *this;
}

bool conversion_tests::msg::Ros2PrimitiverDatentyp::operator ==(
        const Ros2PrimitiverDatentyp& x) const
{

    return (m_a_bool == x.m_a_bool);
}

bool conversion_tests::msg::Ros2PrimitiverDatentyp::operator !=(
        const Ros2PrimitiverDatentyp& x) const
{
    return !(*this == x);
}

size_t conversion_tests::msg::Ros2PrimitiverDatentyp::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return conversion_tests_msg_Ros2PrimitiverDatentyp_max_cdr_typesize;
}

size_t conversion_tests::msg::Ros2PrimitiverDatentyp::getCdrSerializedSize(
        const conversion_tests::msg::Ros2PrimitiverDatentyp& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void conversion_tests::msg::Ros2PrimitiverDatentyp::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_a_bool;

}

void conversion_tests::msg::Ros2PrimitiverDatentyp::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_a_bool;
}

/*!
 * @brief This function sets a value in member a_bool
 * @param _a_bool New value for member a_bool
 */
void conversion_tests::msg::Ros2PrimitiverDatentyp::a_bool(
        bool _a_bool)
{
    m_a_bool = _a_bool;
}

/*!
 * @brief This function returns the value of member a_bool
 * @return Value of member a_bool
 */
bool conversion_tests::msg::Ros2PrimitiverDatentyp::a_bool() const
{
    return m_a_bool;
}

/*!
 * @brief This function returns a reference to member a_bool
 * @return Reference to member a_bool
 */
bool& conversion_tests::msg::Ros2PrimitiverDatentyp::a_bool()
{
    return m_a_bool;
}



size_t conversion_tests::msg::Ros2PrimitiverDatentyp::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return conversion_tests_msg_Ros2PrimitiverDatentyp_max_key_cdr_typesize;
}

bool conversion_tests::msg::Ros2PrimitiverDatentyp::isKeyDefined()
{
    return false;
}

void conversion_tests::msg::Ros2PrimitiverDatentyp::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



