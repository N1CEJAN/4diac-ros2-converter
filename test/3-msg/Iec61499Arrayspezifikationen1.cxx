// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Iec61499Arrayspezifikationen1.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Iec61499Arrayspezifikationen1.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define conversion_tests_msg_Iec61499Arrayspezifikationen1_max_cdr_typesize 6ULL;

#define conversion_tests_msg_Iec61499Arrayspezifikationen1_max_key_cdr_typesize 0ULL;



conversion_tests::msg::Iec61499Arrayspezifikationen1::Iec61499Arrayspezifikationen1()
{
    // conversion_tests::msg::boolean__3 m_static_array_with_capacity
    memset(&m_static_array_with_capacity, 0, (3) * 1);
    // conversion_tests::msg::boolean__3 m_static_array_with_indexation
    memset(&m_static_array_with_indexation, 0, (3) * 1);

}

conversion_tests::msg::Iec61499Arrayspezifikationen1::~Iec61499Arrayspezifikationen1()
{


}

conversion_tests::msg::Iec61499Arrayspezifikationen1::Iec61499Arrayspezifikationen1(
        const Iec61499Arrayspezifikationen1& x)
{
    m_static_array_with_capacity = x.m_static_array_with_capacity;
    m_static_array_with_indexation = x.m_static_array_with_indexation;
}

conversion_tests::msg::Iec61499Arrayspezifikationen1::Iec61499Arrayspezifikationen1(
        Iec61499Arrayspezifikationen1&& x) noexcept 
{
    m_static_array_with_capacity = std::move(x.m_static_array_with_capacity);
    m_static_array_with_indexation = std::move(x.m_static_array_with_indexation);
}

conversion_tests::msg::Iec61499Arrayspezifikationen1& conversion_tests::msg::Iec61499Arrayspezifikationen1::operator =(
        const Iec61499Arrayspezifikationen1& x)
{

    m_static_array_with_capacity = x.m_static_array_with_capacity;
    m_static_array_with_indexation = x.m_static_array_with_indexation;

    return *this;
}

conversion_tests::msg::Iec61499Arrayspezifikationen1& conversion_tests::msg::Iec61499Arrayspezifikationen1::operator =(
        Iec61499Arrayspezifikationen1&& x) noexcept
{

    m_static_array_with_capacity = std::move(x.m_static_array_with_capacity);
    m_static_array_with_indexation = std::move(x.m_static_array_with_indexation);

    return *this;
}

bool conversion_tests::msg::Iec61499Arrayspezifikationen1::operator ==(
        const Iec61499Arrayspezifikationen1& x) const
{

    return (m_static_array_with_capacity == x.m_static_array_with_capacity && m_static_array_with_indexation == x.m_static_array_with_indexation);
}

bool conversion_tests::msg::Iec61499Arrayspezifikationen1::operator !=(
        const Iec61499Arrayspezifikationen1& x) const
{
    return !(*this == x);
}

size_t conversion_tests::msg::Iec61499Arrayspezifikationen1::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return conversion_tests_msg_Iec61499Arrayspezifikationen1_max_cdr_typesize;
}

size_t conversion_tests::msg::Iec61499Arrayspezifikationen1::getCdrSerializedSize(
        const conversion_tests::msg::Iec61499Arrayspezifikationen1& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ((3) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += ((3) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void conversion_tests::msg::Iec61499Arrayspezifikationen1::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_static_array_with_capacity;

    scdr << m_static_array_with_indexation;


}

void conversion_tests::msg::Iec61499Arrayspezifikationen1::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_static_array_with_capacity;

    dcdr >> m_static_array_with_indexation;

}

/*!
 * @brief This function copies the value in member static_array_with_capacity
 * @param _static_array_with_capacity New value to be copied in member static_array_with_capacity
 */
void conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_capacity(
        const conversion_tests::msg::boolean__3& _static_array_with_capacity)
{
    m_static_array_with_capacity = _static_array_with_capacity;
}

/*!
 * @brief This function moves the value in member static_array_with_capacity
 * @param _static_array_with_capacity New value to be moved in member static_array_with_capacity
 */
void conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_capacity(
        conversion_tests::msg::boolean__3&& _static_array_with_capacity)
{
    m_static_array_with_capacity = std::move(_static_array_with_capacity);
}

/*!
 * @brief This function returns a constant reference to member static_array_with_capacity
 * @return Constant reference to member static_array_with_capacity
 */
const conversion_tests::msg::boolean__3& conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_capacity() const
{
    return m_static_array_with_capacity;
}

/*!
 * @brief This function returns a reference to member static_array_with_capacity
 * @return Reference to member static_array_with_capacity
 */
conversion_tests::msg::boolean__3& conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_capacity()
{
    return m_static_array_with_capacity;
}
/*!
 * @brief This function copies the value in member static_array_with_indexation
 * @param _static_array_with_indexation New value to be copied in member static_array_with_indexation
 */
void conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_indexation(
        const conversion_tests::msg::boolean__3& _static_array_with_indexation)
{
    m_static_array_with_indexation = _static_array_with_indexation;
}

/*!
 * @brief This function moves the value in member static_array_with_indexation
 * @param _static_array_with_indexation New value to be moved in member static_array_with_indexation
 */
void conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_indexation(
        conversion_tests::msg::boolean__3&& _static_array_with_indexation)
{
    m_static_array_with_indexation = std::move(_static_array_with_indexation);
}

/*!
 * @brief This function returns a constant reference to member static_array_with_indexation
 * @return Constant reference to member static_array_with_indexation
 */
const conversion_tests::msg::boolean__3& conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_indexation() const
{
    return m_static_array_with_indexation;
}

/*!
 * @brief This function returns a reference to member static_array_with_indexation
 * @return Reference to member static_array_with_indexation
 */
conversion_tests::msg::boolean__3& conversion_tests::msg::Iec61499Arrayspezifikationen1::static_array_with_indexation()
{
    return m_static_array_with_indexation;
}


size_t conversion_tests::msg::Iec61499Arrayspezifikationen1::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return conversion_tests_msg_Iec61499Arrayspezifikationen1_max_key_cdr_typesize;
}

bool conversion_tests::msg::Iec61499Arrayspezifikationen1::isKeyDefined()
{
    return false;
}

void conversion_tests::msg::Iec61499Arrayspezifikationen1::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



